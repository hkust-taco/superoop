
() with {}
//│ res: ()
//│    = []

:js
n = 42 with { x = 1 }
n + n.x
//│ // Query 1
//│ globalThis.n = withConstruct(42, { x: 1 });
//│ // Query 2
//│ res = n + n.x;
//│ // End of generated code
//│ n: 42 & {x: 1}
//│  = [Number: 42] { x: 1 }
//│ res: int
//│    = 43


:js
a = (1,2,3) with {}
//│ // Query 1
//│ globalThis.a = withConstruct([
//│   1,
//│   2,
//│   3
//│ ], {});
//│ // End of generated code
//│ a: (1, 2, 3,)
//│  = [ 1, 2, 3 ]

:escape
def a: nothing // unsound escape hatch
//│ a: nothing
//│  = <missing implementation>

a.length
a.map(fun x -> x + 1)
//│ res: nothing
//│    = 3
//│ res: nothing
//│    = [ 2, 3, 4 ]


:js
ax = (1,2,3) with {x = 4}
//│ // Query 1
//│ globalThis.ax = withConstruct([
//│   1,
//│   2,
//│   3
//│ ], { x: 4 });
//│ // End of generated code
//│ ax: (1, 2, 3,) & {x: 4}
//│   = [ 1, 2, 3, x: 4 ]

ax.x + 1
//│ res: int
//│    = 5


f = (fun x -> x) with {a = 0}
//│ f: 'a -> 'a & {a: 0}
//│  = Function { a: 0 }

f.a
//│ res: 0
//│    = 0

:re // `with` is currently broken with functions
f(0)
//│ res: 0
//│ Runtime error:
//│   TypeError: f is not a function


