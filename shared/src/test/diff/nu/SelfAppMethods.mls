:NewDefs


class A {
  
  fun f = f(f)
  
  fun g : A
  fun g = g(g) // * FIXME not using the signature
  
}
//│ class A {
//│   fun f: nothing
//│   fun g: A
//│ }

:e
module A {
  fun i(x) = x
  fun f = f(f)
  fun g(x) = x(x)
  fun h = g(g)
}
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.22: 	  fun h = g(g)
//│ ║        	          ^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ module A {
//│   fun f: nothing
//│   fun g: forall 'a 'b. ('a -> 'b & 'a) -> 'b
//│   fun h: error
//│   fun i: forall 'c. 'c -> 'c
//│ }

// * Note this permutation works: currently we generalize check functions in the source code order...
module A {
  fun i(x) = x
  fun f = f(f)
  fun h = g(g)
  fun g(x) = x(x)
}
//│ module A {
//│   fun f: nothing
//│   fun g: forall 'b 'a. 'a -> 'b
//│     where
//│       'a := 'a -> 'b
//│   fun h: forall 'b. 'b
//│   fun i: forall 'c. 'c -> 'c
//│ }
//│ where
//│   'a := 'a -> 'b

:ns
A.i
//│ 'i
//│   where
//│     'i :> forall 'a. 'a -> 'a
//│ res
//│     = [Function: i]

:re
:ns
A.f
//│ 'f
//│   where
//│     'f :> forall 'f0 'a. 'a
//│       where
//│         'f0 <: 'f0 -> 'a
//│         'a <: 'f0
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:ns
A.g
//│ 'g
//│   where
//│     'g :> forall 'a 'b 'c 'h. 'a -> 'b
//│       where
//│         'a := 'a -> 'b
//│         'b <: 'c
//│         'c <: 'h
//│ res
//│     = [Function: g]

:ns
:re
A.h
//│ 'h
//│   where
//│     'h :> forall 'a 'h0. 'a
//│       where
//│         'a <: 'h0
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


