
type Add[E] = { x: E -> E }
//│ Defined type alias Add[=E]

def e2: Add['e] as 'e
//│ e2: 'e
//│   where
//│     'e := Add['e]
//│ where
//│   'e := Add['e]
//│   = <missing implementation>

e2 : Add['e] as 'e
//│ res: 'e
//│   where
//│     'e := Add['e]
//│    = <no result>
//│      e2 is not implemented


def f0: ('a -> int) as 'a
//│ f0: 'a
//│   where
//│     'a := 'a -> int
//│ where
//│   'a := 'a -> int
//│   = <missing implementation>

// :e // * Did not work before when added subtype checking to constraining...
f0 = f0
//│ 'a
//│   where
//│     'a := 'a -> int
//│ where
//│   'a := 'a -> int
//│   <:  f0:
//│ 'a
//│   where
//│     'a := 'a -> int
//│ where
//│   'a := 'a -> int
//│   = <no result>
//│     f0 is not implemented


type F1 = F1 -> int
//│ Defined type alias F1

def f1: F1
//│ f1: F1
//│   = <missing implementation>

f1 = f1
//│ F1
//│   <:  f1:
//│ F1
//│   = <no result>
//│     f1 is not implemented


type F2[A] = F2[A] -> A
//│ Defined type alias F2[=A]

def f1: F2[int]
//│ f1: F2[int]
//│   = <missing implementation>

f1 = f1
//│ F2[int]
//│   <:  f1:
//│ F2[int]
//│   = <no result>
//│     f1 is not implemented


