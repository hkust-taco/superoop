:NoJS


class Expr[A]
  method Inv: A -> A
//│ Defined class Expr[=A]
//│ Declared Expr.Inv: Expr['A] -> 'A -> 'A

def asExpr: Expr['a] -> Expr['a]
//│ asExpr: Expr['a] -> Expr['a]

def alsoPrintSizeSimple f =
  let rec nested expr =
    f expr
  in nested
//│ alsoPrintSizeSimple: ('a -> 'b) -> 'a -> 'b

def alsoPrintSizeSimple f =
  let rec nested expr =
    f (asExpr expr)
  in nested
//│ alsoPrintSizeSimple: (Expr['a] -> 'b) -> Expr['a] -> 'b
//│   where
//│     'a :> anything
//│ where
//│   'a :> anything

def alsoPrintSizeSimple f =
  let rec nested expr =
    asExpr (f (asExpr expr))
  in nested
//│ alsoPrintSizeSimple: (Expr['a] -> Expr['a0]) -> Expr['a] -> Expr['a0]
//│   where
//│     'a :> anything
//│     'a0 :> anything
//│ where
//│   'a0 :> anything
//│   'a :> anything

def alsoPrintSizeSimple f =
  let rec nested expr =
    f (asExpr expr) nested
  in nested
//│ alsoPrintSizeSimple: (Expr[in 'a out 'a | 'a0] -> (Expr[in 'a1 & ('a | 'a0) out 'a2] -> 'b) -> 'b) -> Expr['a2] -> 'b
//│   where
//│     'a2 :> 'a | 'a1
//│         <: 'a0
//│ where
//│   'a2 :> 'a | 'a1
//│       <: 'a0


class Program
//│ Defined class Program

def mapExpr: (forall 'a. Expr['a] -> Expr['a]) -> Program -> Program
def print: Expr['a] -> unit
//│ mapExpr: (forall 'a. Expr['a] -> Expr['a]) -> Program -> Program
//│ print: Expr['a] -> unit

def alsoPrintSize f =
  mapExpr(fun e -> let tmp = print e in f e)
//│ alsoPrintSize: (Expr[in ??a out ??a0] -> Expr[in ??a0 out ??a]) -> Program -> Program

:e
alsoPrintSize id
//│ ╔══[ERROR] Type error in application
//│ ║  l.66: 	alsoPrintSize id
//│ ║        	^^^^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.56: 	def mapExpr: (forall 'a. Expr['a] -> Expr['a]) -> Program -> Program
//│ ║        	                                          ^^
//│ ╟── back into type variable `'a`
//│ ║  l.56: 	def mapExpr: (forall 'a. Expr['a] -> Expr['a]) -> Program -> Program
//│ ║        	                              ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.62: 	  mapExpr(fun e -> let tmp = print e in f e)
//│ ╙──      	                                        ^^^
//│ res: error | Program -> Program

def alsoPrintSize (f: forall 'a. Expr['a] -> Expr['a]) =
  mapExpr(fun e -> let tmp = print e in f e)
//│ alsoPrintSize: (forall 'a. Expr['a] -> Expr['a]) -> Program -> Program

alsoPrintSize id
//│ res: Program -> Program


class ExprCo[A]
  method Co: A
//│ Defined class ExprCo[+A]
//│ Declared ExprCo.Co: ExprCo['A] -> 'A

def mapExprCo: (forall 'a. ExprCo['a] -> ExprCo['a]) -> Program -> Program
def printCo: ExprCo['a] -> unit
//│ mapExprCo: (forall 'a. ExprCo['a] -> ExprCo['a]) -> Program -> Program
//│ printCo: ExprCo[?] -> unit

def alsoPrintSizeCo f =
  mapExprCo(fun e -> let tmp = printCo e in f e)
//│ alsoPrintSizeCo: (ExprCo[??a] -> ExprCo[??a0]) -> Program -> Program

:e
alsoPrintSizeCo id
//│ ╔══[ERROR] Type error in application
//│ ║  l.105: 	alsoPrintSizeCo id
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.95: 	def mapExprCo: (forall 'a. ExprCo['a] -> ExprCo['a]) -> Program -> Program
//│ ║        	                                  ^^
//│ ╟── back into type variable `'a`
//│ ║  l.95: 	def mapExprCo: (forall 'a. ExprCo['a] -> ExprCo['a]) -> Program -> Program
//│ ║        	                                                ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.101: 	  mapExprCo(fun e -> let tmp = printCo e in f e)
//│ ╙──       	                                            ^^^
//│ res: error | Program -> Program

def alsoPrintSizeCo (f: forall 'a. Expr['a] -> Expr['a]) =
  mapExpr(fun e -> let tmp = print e in f e)
//│ alsoPrintSizeCo: (forall 'a. Expr['a] -> Expr['a]) -> Program -> Program

alsoPrintSizeCo id
//│ res: Program -> Program


