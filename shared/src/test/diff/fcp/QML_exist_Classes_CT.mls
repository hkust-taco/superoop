// * Adaptation of QML's original existentials example; using encoded existentials and classes


:NoRecursiveTypes
:ConstrainedTypes
// :DistributeForalls
// :GeneralizeArguments

// TODO try without some signatures



class ArraysRep[A, Rep]
  method Init: A -> Rep
  method Sub: Rep -> int -> A
  method Update: Rep -> int -> A -> Rep
  method Fold: (A -> 'b -> 'b) -> 'b -> Rep -> 'b
//│ Defined class ArraysRep[=A, =Rep]
//│ Declared ArraysRep.Init: ArraysRep['A, 'Rep] -> 'A -> 'Rep
//│ Declared ArraysRep.Sub: ArraysRep['A, 'Rep] -> 'Rep -> int -> 'A
//│ Declared ArraysRep.Update: ArraysRep['A, 'Rep] -> 'Rep -> int -> 'A -> 'Rep
//│ Declared ArraysRep.Fold: ArraysRep['A, 'Rep] -> ('A -> 'b -> 'b) -> 'b -> 'Rep -> 'b

class ArraysImpl[A, Rep]: ArraysRep[A, Rep] & {
    init: A -> Rep;
    sub: Rep -> int -> A;
    update: Rep -> int -> A -> Rep;
    fold: forall 'b. (A -> 'b -> 'b) -> 'b -> Rep -> 'b
  }
  method Init = this.init
  method Sub = this.sub
  method Update = this.update
  method Fold = this.fold
//│ Defined class ArraysImpl[=A, =Rep]
//│ Defined ArraysImpl.Init: ArraysImpl['A, 'Rep] -> 'A -> 'Rep
//│ Defined ArraysImpl.Sub: ArraysImpl['A, 'Rep] -> 'Rep -> int -> 'A
//│ Defined ArraysImpl.Update: ArraysImpl['A, 'Rep] -> 'Rep -> int -> 'A -> 'Rep
//│ Defined ArraysImpl.Fold: ArraysImpl['A, 'Rep] -> ('A -> 'b -> 'b) -> 'b -> 'Rep -> 'b

type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ Defined type alias Arrays[=A]



baseImpl = ArraysImpl {
    init   = fun a -> a;
    sub    = fun r -> fun (i : int) -> r;
    update = fun r -> fun (i : int) -> fun a -> a;
    fold   = fun f -> fun b -> fun r -> f r b
  }
//│ baseImpl: ArraysImpl['Rep, 'Rep] with {fold: forall 'a 'b 'c 'd. 'a -> 'b -> ('c -> 'd
//│   where
//│     'a <: 'c -> 'b -> 'd), init: forall 'e. 'e -> 'e, sub: forall 'f. 'f -> int -> 'f, update: forall 'g. anything -> int -> 'g -> 'g}
//│         = ArraysImpl {
//│             init: [Function: init],
//│             sub: [Function: sub],
//│             update: [Function: update],
//│             fold: [Function: fold]
//│           }

def base: Arrays['a]
def base f = f baseImpl
//│ base: Arrays['a]
//│     = <missing implementation>
//│ ((forall 'Rep. ArraysImpl['Rep, 'Rep] with {fold: forall 'a 'b 'c 'd. 'a -> 'b -> ('c -> 'd
//│   where
//│     'a <: 'c -> 'b -> 'd), init: forall 'e. 'e -> 'e, sub: forall 'f. 'f -> int -> 'f, update: forall 'g. anything -> int -> 'g -> 'g}) -> 'h) -> 'h
//│   <:  base:
//│ Arrays['a]
//│     = [Function: base]



def simpleStepImpl arrImpl = ArraysImpl {
    init   = fun a -> (arrImpl.Init a, "initialized");
    sub    = fun ((r0, r1)) -> fun i -> arrImpl.Sub r0 i;
    update = fun ((r0, r1)) -> fun i -> fun a -> (arrImpl.Update r0 i a, "updated");
    fold   = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.Fold f b r0
  }
//│ simpleStepImpl: (ArraysRep[in 'A | 'A0 & 'A1 | 'A2 | 'A1 & 'A3 out 'A & 'A0 & 'A2 & 'A3, in 'a & 'Rep & 'Rep0 | 'Rep | 'Rep1 out 'Rep0 & 'a & 'Rep & ('a | 'Rep1)] & 'c) -> (ArraysImpl['A1, 'Rep2] with {fold: forall 'd 'b 'A4 'Rep3. 'd -> 'b -> (('Rep3, anything,) -> 'b
//│   where
//│     'd <: 'A4 -> 'b -> 'b
//│     'c <: ArraysRep['A4, 'Rep3]), init: forall 'A5 'Rep4. 'A5 -> ('Rep4, "initialized",)
//│   where
//│     'c <: ArraysRep['A5, 'Rep4], sub: forall 'Rep5 'A6. ('Rep5, anything,) -> (int -> 'A6
//│   where
//│     'c <: ArraysRep['A6, 'Rep5]), update: forall 'Rep6 'A7. ('Rep6, anything,) -> int -> ('A7 -> ('Rep6, "updated",)
//│   where
//│     'c <: ArraysRep['A7, 'Rep6])})
//│ where
//│   'A1 <: nothing
//│   'Rep2 :> ('a, "initialized" | "updated",)
//│         <: (nothing, anything,)
//│ where
//│   'Rep2 :> ('a, "initialized" | "updated",)
//│         <: (nothing, anything,)
//│   'A1 <: nothing
//│               = [Function: simpleStepImpl]

simpleStepImpl : ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ res: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│    = [Function: simpleStepImpl]

// def simpleStepImpl2_ty: Arrays['a] -> ArraysImpl['a, ('_, string)]
// def simpleStepImpl2_ty: Arrays['a] -> ArraysImpl['a, '_]
// def simpleStepImpl2 arr = arr simpleStepImpl

def simpleStepImpl2_ty: (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, string)]
//│ simpleStepImpl2_ty: (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, string,)]
//│                   = <missing implementation>


def simpleStepImpl2 arr = arr simpleStepImpl
//│ simpleStepImpl2: ((forall 'A 'A0 'A1 'A2 'A3 'Rep0 'a 'Rep 'Rep1 'c 'Rep2. (ArraysRep[in 'A | 'A0 & 'A1 | 'A2 | 'A1 & 'A3 out 'A & 'A0 & 'A2 & 'A3, in 'a & 'Rep & 'Rep0 | 'Rep | 'Rep1 out 'Rep0 & 'a & 'Rep & ('a | 'Rep1)] & 'c) -> (ArraysImpl['A1, 'Rep2] with {fold: forall 'd 'b 'A4 'Rep3. 'd -> 'b -> (('Rep3, anything,) -> 'b
//│   where
//│     'd <: 'A4 -> 'b -> 'b
//│     'c <: ArraysRep['A4, 'Rep3]), init: forall 'A5 'Rep4. 'A5 -> ('Rep4, "initialized",)
//│   where
//│     'c <: ArraysRep['A5, 'Rep4], sub: forall 'Rep5 'A6. ('Rep5, anything,) -> (int -> 'A6
//│   where
//│     'c <: ArraysRep['A6, 'Rep5]), update: forall 'Rep6 'A7. ('Rep6, anything,) -> int -> ('A7 -> ('Rep6, "updated",)
//│   where
//│     'c <: ArraysRep['A7, 'Rep6])})
//│ where
//│   'A1 <: nothing
//│   'Rep2 :> ('a, "initialized" | "updated",)
//│         <: (nothing, anything,)) -> 'e) -> 'e
//│ where
//│   'Rep2 :> ('a, "initialized" | "updated",)
//│         <: (nothing, anything,)
//│   'A1 <: nothing
//│                = [Function: simpleStepImpl2]

simpleStepImpl2_ty = simpleStepImpl2
//│ ((forall 'A 'A0 'A1 'A2 'A3 'Rep0 'a 'Rep 'Rep1 'c 'Rep2. (ArraysRep[in 'A | 'A0 & 'A1 | 'A2 | 'A1 & 'A3 out 'A & 'A0 & 'A2 & 'A3, in 'a & 'Rep & 'Rep0 | 'Rep | 'Rep1 out 'Rep0 & 'a & 'Rep & ('a | 'Rep1)] & 'c) -> (ArraysImpl['A1, 'Rep2] with {fold: forall 'd 'b 'A4 'Rep3. 'd -> 'b -> (('Rep3, anything,) -> 'b
//│   where
//│     'd <: 'A4 -> 'b -> 'b
//│     'c <: ArraysRep['A4, 'Rep3]), init: forall 'A5 'Rep4. 'A5 -> ('Rep4, "initialized",)
//│   where
//│     'c <: ArraysRep['A5, 'Rep4], sub: forall 'Rep5 'A6. ('Rep5, anything,) -> (int -> 'A6
//│   where
//│     'c <: ArraysRep['A6, 'Rep5]), update: forall 'Rep6 'A7. ('Rep6, anything,) -> int -> ('A7 -> ('Rep6, "updated",)
//│   where
//│     'c <: ArraysRep['A7, 'Rep6])})
//│ where
//│   'A1 <: nothing
//│   'Rep2 :> ('a, "initialized" | "updated",)
//│         <: (nothing, anything,)) -> 'e) -> 'e
//│ where
//│   'Rep2 :> ('a, "initialized" | "updated",)
//│         <: (nothing, anything,)
//│   'A1 <: nothing
//│   <:  simpleStepImpl2_ty:
//│ (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, string,)]
//│                   = [Function: simpleStepImpl2]

:e // * Annotation is actually counter-productive... probably because the rigid universal in Arrays gets extruded!
def simpleStepImpl2_ty (arr: Arrays['a]) = arr simpleStepImpl
//│ Arrays['a] -> error
//│   <:  simpleStepImpl2_ty:
//│ (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, string,)]
//│ ╔══[ERROR] Type error in application
//│ ║  l.158: 	def simpleStepImpl2_ty (arr: Arrays['a]) = arr simpleStepImpl
//│ ║         	                                           ^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'Rep` leaks out of its scope
//│ ║  l.40: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                                            ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.74: 	def simpleStepImpl arrImpl = ArraysImpl {
//│ ║        	                   ^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.75: 	    init   = fun a -> (arrImpl.Init a, "initialized");
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.76: 	    sub    = fun ((r0, r1)) -> fun i -> arrImpl.Sub r0 i;
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.77: 	    update = fun ((r0, r1)) -> fun i -> fun a -> (arrImpl.Update r0 i a, "updated");
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.78: 	    fold   = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.Fold f b r0
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.79: 	  }
//│ ║        	^^^
//│ ╟── • this reference:
//│ ║  l.158: 	def simpleStepImpl2_ty (arr: Arrays['a]) = arr simpleStepImpl
//│ ║         	                                               ^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.158: 	def simpleStepImpl2_ty (arr: Arrays['a]) = arr simpleStepImpl
//│ ╙──       	                                           ^^^
//│                   = [Function: simpleStepImpl2_ty1]

def simpleStep: Arrays['a] -> Arrays['a]
//│ simpleStep: Arrays['a] -> Arrays['a]
//│           = <missing implementation>

:e // * Since "sound extrusion"
def simpleStep arr f = f (simpleStepImpl2 arr)
//│ 'a -> (('c -> 'd) -> 'd
//│   where
//│     'a <: (forall 'A 'A0 'g 'e 'Rep. (ArraysRep[in anything out nothing, in 'A out nothing] & 'e) -> (ArraysImpl['A0, 'Rep] with {fold: forall 'f 'b 'A1 'Rep0. 'f -> 'b -> (('Rep0, 'A,) -> 'b
//│       where
//│         'f <: 'A1 -> 'b -> 'b
//│         'e <: ArraysRep['A1, 'Rep0]), init: forall 'A2 'Rep1. 'A2 -> ('Rep1, "initialized",)
//│       where
//│         'e <: ArraysRep['A2, 'Rep1], sub: forall 'Rep2 'A3. ('Rep2, 'A,) -> (int -> 'A3
//│       where
//│         'e <: ArraysRep['A3, 'Rep2]), update: forall 'Rep3 'A4. ('Rep3, 'A,) -> int -> ('A4 -> ('Rep3, "updated",)
//│       where
//│         'e <: ArraysRep['A4, 'Rep3])})
//│     where
//│       'A0 <: nothing
//│       'Rep :> ('g, "initialized" | "updated",)
//│            <: (nothing, 'A,)) -> 'c)
//│ where
//│   'Rep :> ('g, "initialized" | "updated",)
//│        <: (nothing, 'A,)
//│   'A0 <: nothing
//│   <:  simpleStep:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.195: 	def simpleStep arr f = f (simpleStepImpl2 arr)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'Rep` leaks out of its scope
//│ ║  l.40: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                                            ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.74: 	def simpleStepImpl arrImpl = ArraysImpl {
//│ ║        	                   ^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.75: 	    init   = fun a -> (arrImpl.Init a, "initialized");
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.76: 	    sub    = fun ((r0, r1)) -> fun i -> arrImpl.Sub r0 i;
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.77: 	    update = fun ((r0, r1)) -> fun i -> fun a -> (arrImpl.Update r0 i a, "updated");
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.78: 	    fold   = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.Fold f b r0
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.79: 	  }
//│ ║        	^^^
//│ ╟── • this reference:
//│ ║  l.113: 	def simpleStepImpl2 arr = arr simpleStepImpl
//│ ║         	                              ^^^^^^^^^^^^^^
//│ ╟── • this function:
//│ ║  l.195: 	def simpleStep arr f = f (simpleStepImpl2 arr)
//│ ╙──       	                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│           = [Function: simpleStep]

:e // TODO update: seems like the given type for `simpleStepImpl2_ty` is not precise enough
def simpleStep arr f = f (simpleStepImpl2_ty arr)
//│ 'a -> ((ArraysImpl['A, ('Rep, string,)] -> 'b) -> 'b
//│   where
//│     'a <: forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r)
//│   <:  simpleStep:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.247: 	def simpleStep arr f = f (simpleStepImpl2_ty arr)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'Rep` leaks out of its scope
//│ ║  l.40: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.247: 	def simpleStep arr f = f (simpleStepImpl2_ty arr)
//│ ╙──       	                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│           = [Function: simpleStep1]

sb = simpleStep base
//│ sb: Arrays['a]
//│   = [Function (anonymous)]

sb (fun arr -> arr.Init true)
//│ res: ??Rep
//│    = [ true, 'initialized' ]

sb (fun arr -> arr.Sub (arr.Init true) 1)
//│ res: true
//│    = true

:e // * Expected – argument order confusion
sb (fun arr -> arr.Sub 0 (arr.Init true))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.278: 	sb (fun arr -> arr.Sub 0 (arr.Init true))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `'Rep` is not an instance of type `int`
//│ ║  l.40: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                                            ^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.15: 	  method Sub: Rep -> int -> A
//│ ║        	                     ^^^
//│ ╟── from application:
//│ ║  l.278: 	sb (fun arr -> arr.Sub 0 (arr.Init true))
//│ ║         	                          ^^^^^^^^^^^^^
//│ ╟── Note: quantified type variable 'Rep is defined at:
//│ ║  l.40: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟──       class type parameter Rep is defined at:
//│ ║  l.13: 	class ArraysRep[A, Rep]
//│ ╙──      	                   ^^^
//│ res: error | true
//│ Runtime error:
//│   TypeError: number 0 is not iterable (cannot read property Symbol(Symbol.iterator))

sb (fun arr -> arr.Update (arr.Init true) 1 false)
//│ res: ??Rep
//│    = [ false, 'updated' ]

:e // * Rightly prevent skolem confusion
sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ╔══[ERROR] Type error in application
//│ ║  l.306: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'Rep` leaks out of its scope
//│ ║  l.40: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                                            ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.306: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ║         	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.265: 	sb = simpleStep base
//│ ║         	     ^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.306: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ║         	                ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.306: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ╙──       	                                             ^^^^^^^^^^^^^^
//│ res: error | int -> anything -> (??Rep | ??Rep0)
//│    = [Function (anonymous)]

sb (fun arr ->
    let r2 = arr.Update (arr.Init true) 1 false
    in (arr.Sub r2 0, arr.Sub r2 1)
  )
//│ res: (Bool, Bool,)
//│    = [ false, false ]



:escape
def Math: nothing
//│ Math: nothing
//│     = <missing implementation>

def div: int -> int -> int
def div a b = Math.trunc(a/b)
//│ div: int -> int -> int
//│    = <missing implementation>
//│ number -> number -> nothing
//│   <:  div:
//│ int -> int -> int
//│    = [Function: div1]

def mod: int -> int -> int
//│ mod: int -> int -> int
//│    = <missing implementation>

rec def mod a b = if a < b then a else mod (a - b) b
//│ int -> int -> int
//│   <:  mod:
//│ int -> int -> int
//│    = [Function: mod]

def stepImpl arrImpl = ArraysImpl {
    init = fun a -> (arrImpl.Init a, arrImpl.Init a);
    sub = fun ((r0, r1)) -> fun i ->
      if mod i 2 == 0
      then arrImpl.Sub r0 (div i 2)
      else arrImpl.Sub r1 (div i 2);
    update = fun ((r0, r1)) -> fun i -> fun a ->
      if mod i 2 == 0
      then (arrImpl.Update r0 (div i 2) a, r1)
      else (r0, arrImpl.Update r1 (div i 2) a);
    fold = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.Fold f (arrImpl.Fold f b r0) r1
  }
//│ stepImpl: (ArraysRep[in 'A | 'A0 | 'A1 | 'A2 | 'A3 & 'A4 | 'A3 & 'A5 | 'A3 & ('A6 | 'A7) out 'A & 'A0 & 'A6 & 'A7 & 'A1 & 'A2 & 'A4 & 'A5, in 'a & 'Rep & 'Rep0 | 'Rep | 'c & 'Rep1 & 'Rep2 | 'Rep1 | 'Rep3 | 'Rep4 out 'Rep0 & 'a & 'Rep & 'Rep2 & 'c & 'Rep1 & ('a | 'Rep3) & ('c | 'Rep4)] & 'd) -> (ArraysImpl['A3, 'Rep5] with {fold: forall 'e 'f 'A8 'b 'A9 'b0 'Rep7 'Rep6. 'e -> 'f -> (('Rep6, 'Rep7,) -> ('f | 'b)
//│   where
//│     'd <: ArraysRep['A8, 'Rep7] & ArraysRep['A9, 'Rep6]
//│     'e <: 'A8 -> ('f | 'b) -> 'b & 'A9 -> ('b0 | 'f) -> ('b & 'b0)), init: forall 'A10 'Rep8 'A11 'Rep9. ('A10 & 'A11) -> ('Rep8, 'Rep9,)
//│   where
//│     'd <: ArraysRep['A10, 'Rep8] & ArraysRep['A11, 'Rep9], sub: forall 'Rep10 'Rep11 'A12 'g 'A13. ('Rep10, 'Rep11,) -> (int -> 'g
//│   where
//│     'd <: ArraysRep['A12, 'Rep10] & ArraysRep['A13, 'Rep11])
//│ where
//│   'A12 <: 'g
//│   'A13 <: 'g, update: forall 'Rep12 'Rep13 'A14 'A15. ('Rep12, 'Rep13,) -> int -> (('A14 & 'A15) -> ('Rep12, 'Rep13,)
//│   where
//│     'd <: ArraysRep['A14, 'Rep12] & ArraysRep['A15, 'Rep13])})
//│ where
//│   'A3 <: nothing
//│   'Rep5 :> ('a, 'c,)
//│         <: (nothing, nothing,)
//│ where
//│   'A13 <: 'g
//│   'A12 <: 'g
//│   'Rep5 :> ('a, 'c,)
//│         <: (nothing, nothing,)
//│   'A3 <: nothing
//│         = [Function: stepImpl]

def stepImpl2_ty: (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, 'Rep)]
//│ stepImpl2_ty: (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, 'Rep,)]
//│             = <missing implementation>

def stepImpl2 arr = arr stepImpl
//│ stepImpl2: ((forall 'A 'A0 'A1 'A2 'A4 'A3 'A5 'A6 'A7 'Rep0 'a 'Rep 'Rep2 'c 'Rep1 'Rep3 'Rep4 'd 'Rep5. (ArraysRep[in 'A | 'A0 | 'A1 | 'A2 | 'A3 & 'A4 | 'A3 & 'A5 | 'A3 & ('A6 | 'A7) out 'A & 'A0 & 'A6 & 'A7 & 'A1 & 'A2 & 'A4 & 'A5, in 'a & 'Rep & 'Rep0 | 'Rep | 'c & 'Rep1 & 'Rep2 | 'Rep1 | 'Rep3 | 'Rep4 out 'Rep0 & 'a & 'Rep & 'Rep2 & 'c & 'Rep1 & ('a | 'Rep3) & ('c | 'Rep4)] & 'd) -> (ArraysImpl['A3, 'Rep5] with {fold: forall 'e 'f 'A8 'b 'A9 'b0 'Rep7 'Rep6. 'e -> 'f -> (('Rep6, 'Rep7,) -> ('f | 'b)
//│   where
//│     'd <: ArraysRep['A8, 'Rep7] & ArraysRep['A9, 'Rep6]
//│     'e <: 'A8 -> ('f | 'b) -> 'b & 'A9 -> ('b0 | 'f) -> ('b & 'b0)), init: forall 'A10 'Rep8 'A11 'Rep9. ('A10 & 'A11) -> ('Rep8, 'Rep9,)
//│   where
//│     'd <: ArraysRep['A10, 'Rep8] & ArraysRep['A11, 'Rep9], sub: forall 'Rep10 'Rep11 'A12 'g 'A13. ('Rep10, 'Rep11,) -> (int -> 'g
//│   where
//│     'd <: ArraysRep['A12, 'Rep10] & ArraysRep['A13, 'Rep11])
//│ where
//│   'A12 <: 'g
//│   'A13 <: 'g, update: forall 'Rep12 'Rep13 'A14 'A15. ('Rep12, 'Rep13,) -> int -> (('A14 & 'A15) -> ('Rep12, 'Rep13,)
//│   where
//│     'd <: ArraysRep['A14, 'Rep12] & ArraysRep['A15, 'Rep13])})
//│ where
//│   'A3 <: nothing
//│   'Rep5 :> ('a, 'c,)
//│         <: (nothing, nothing,)) -> 'h) -> 'h
//│ where
//│   'A13 <: 'g
//│   'A12 <: 'g
//│   'Rep5 :> ('a, 'c,)
//│         <: (nothing, nothing,)
//│   'A3 <: nothing
//│          = [Function: stepImpl2]

stepImpl2_ty = stepImpl2
//│ ((forall 'A 'A0 'A1 'A2 'A4 'A3 'A5 'A6 'A7 'Rep0 'a 'Rep 'Rep2 'c 'Rep1 'Rep3 'Rep4 'd 'Rep5. (ArraysRep[in 'A | 'A0 | 'A1 | 'A2 | 'A3 & 'A4 | 'A3 & 'A5 | 'A3 & ('A6 | 'A7) out 'A & 'A0 & 'A6 & 'A7 & 'A1 & 'A2 & 'A4 & 'A5, in 'a & 'Rep & 'Rep0 | 'Rep | 'c & 'Rep1 & 'Rep2 | 'Rep1 | 'Rep3 | 'Rep4 out 'Rep0 & 'a & 'Rep & 'Rep2 & 'c & 'Rep1 & ('a | 'Rep3) & ('c | 'Rep4)] & 'd) -> (ArraysImpl['A3, 'Rep5] with {fold: forall 'e 'f 'A8 'b 'A9 'b0 'Rep7 'Rep6. 'e -> 'f -> (('Rep6, 'Rep7,) -> ('f | 'b)
//│   where
//│     'd <: ArraysRep['A8, 'Rep7] & ArraysRep['A9, 'Rep6]
//│     'e <: 'A8 -> ('f | 'b) -> 'b & 'A9 -> ('b0 | 'f) -> ('b & 'b0)), init: forall 'A10 'Rep8 'A11 'Rep9. ('A10 & 'A11) -> ('Rep8, 'Rep9,)
//│   where
//│     'd <: ArraysRep['A10, 'Rep8] & ArraysRep['A11, 'Rep9], sub: forall 'Rep10 'Rep11 'A12 'g 'A13. ('Rep10, 'Rep11,) -> (int -> 'g
//│   where
//│     'd <: ArraysRep['A12, 'Rep10] & ArraysRep['A13, 'Rep11])
//│ where
//│   'A12 <: 'g
//│   'A13 <: 'g, update: forall 'Rep12 'Rep13 'A14 'A15. ('Rep12, 'Rep13,) -> int -> (('A14 & 'A15) -> ('Rep12, 'Rep13,)
//│   where
//│     'd <: ArraysRep['A14, 'Rep12] & ArraysRep['A15, 'Rep13])})
//│ where
//│   'A3 <: nothing
//│   'Rep5 :> ('a, 'c,)
//│         <: (nothing, nothing,)) -> 'h) -> 'h
//│ where
//│   'A13 <: 'g
//│   'A12 <: 'g
//│   'Rep5 :> ('a, 'c,)
//│         <: (nothing, nothing,)
//│   'A3 <: nothing
//│   <:  stepImpl2_ty:
//│ (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, 'Rep,)]
//│             = [Function: stepImpl2]


def step: Arrays['a] -> Arrays['a]
//│ step: Arrays['a] -> Arrays['a]
//│     = <missing implementation>

:e // * Since "sound extrusion"
def step arr f = f (stepImpl2 arr)
//│ 'a -> (('c -> 'd) -> 'd
//│   where
//│     'a <: (forall 'A 'e 'f 'g. (ArraysRep[in anything out nothing, in anything out 'e & 'f] & 'g) -> (ArraysImpl['A, ('e, 'f,)] with {fold: forall 'h 'i 'A0 'b 'A1 'b0 'Rep0 'Rep. 'h -> 'i -> (('Rep, 'Rep0,) -> ('i | 'b)
//│       where
//│         'g <: ArraysRep['A0, 'Rep0] & ArraysRep['A1, 'Rep]
//│         'h <: 'A0 -> ('i | 'b) -> 'b & 'A1 -> ('b0 | 'i) -> ('b & 'b0)), init: forall 'A2 'Rep1 'A3 'Rep2. ('A2 & 'A3) -> ('Rep1, 'Rep2,)
//│       where
//│         'g <: ArraysRep['A2, 'Rep1] & ArraysRep['A3, 'Rep2], sub: forall 'Rep3 'Rep4 'A4 'j 'A5. ('Rep3, 'Rep4,) -> (int -> 'j
//│       where
//│         'g <: ArraysRep['A4, 'Rep3] & ArraysRep['A5, 'Rep4])
//│     where
//│       'A4 <: 'j
//│       'A5 <: 'j, update: forall 'Rep5 'Rep6 'A6 'A7. ('Rep5, 'Rep6,) -> int -> (('A6 & 'A7) -> ('Rep5, 'Rep6,)
//│       where
//│         'g <: ArraysRep['A6, 'Rep5] & ArraysRep['A7, 'Rep6])})
//│     where
//│       'A <: nothing) -> 'c)
//│ where
//│   'A5 <: 'j
//│   'A4 <: 'j
//│   'A <: nothing
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.463: 	def step arr f = f (stepImpl2 arr)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'Rep` leaks out of its scope
//│ ║  l.40: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                                            ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.362: 	def stepImpl arrImpl = ArraysImpl {
//│ ║         	             ^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.363: 	    init = fun a -> (arrImpl.Init a, arrImpl.Init a);
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.364: 	    sub = fun ((r0, r1)) -> fun i ->
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.365: 	      if mod i 2 == 0
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.366: 	      then arrImpl.Sub r0 (div i 2)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.367: 	      else arrImpl.Sub r1 (div i 2);
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.368: 	    update = fun ((r0, r1)) -> fun i -> fun a ->
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.369: 	      if mod i 2 == 0
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.370: 	      then (arrImpl.Update r0 (div i 2) a, r1)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.371: 	      else (r0, arrImpl.Update r1 (div i 2) a);
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.372: 	    fold = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.Fold f (arrImpl.Fold f b r0) r1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.373: 	  }
//│ ║         	^^^
//│ ╟── • this reference:
//│ ║  l.403: 	def stepImpl2 arr = arr stepImpl
//│ ║         	                        ^^^^^^^^
//│ ╟── • this function:
//│ ║  l.463: 	def step arr f = f (stepImpl2 arr)
//│ ╙──       	             ^^^^^^^^^^^^^^^^^^^^^
//│     = [Function: step]

// * Now the annotation was okay [until "sound extrusion"] because the result no longer extruded it...
:e // * Since "sound extrusion"
def step (arr: Arrays['a]) f = f (stepImpl2 arr)
//│ Arrays['a] -> (error -> 'b) -> 'b
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in application
//│ ║  l.529: 	def step (arr: Arrays['a]) f = f (stepImpl2 arr)
//│ ║         	                                  ^^^^^^^^^^^^^
//│ ╟── type variable `'Rep` leaks out of its scope
//│ ║  l.40: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                                            ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this applied expression:
//│ ║  l.403: 	def stepImpl2 arr = arr stepImpl
//│ ║         	                    ^^^
//│ ╟── • this function:
//│ ║  l.362: 	def stepImpl arrImpl = ArraysImpl {
//│ ║         	             ^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.363: 	    init = fun a -> (arrImpl.Init a, arrImpl.Init a);
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.364: 	    sub = fun ((r0, r1)) -> fun i ->
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.365: 	      if mod i 2 == 0
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.366: 	      then arrImpl.Sub r0 (div i 2)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.367: 	      else arrImpl.Sub r1 (div i 2);
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.368: 	    update = fun ((r0, r1)) -> fun i -> fun a ->
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.369: 	      if mod i 2 == 0
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.370: 	      then (arrImpl.Update r0 (div i 2) a, r1)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.371: 	      else (r0, arrImpl.Update r1 (div i 2) a);
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.372: 	    fold = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.Fold f (arrImpl.Fold f b r0) r1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.373: 	  }
//│ ║         	^^^
//│ ╟── • this reference:
//│ ║  l.403: 	def stepImpl2 arr = arr stepImpl
//│ ║         	                        ^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.529: 	def step (arr: Arrays['a]) f = f (stepImpl2 arr)
//│ ║         	                                            ^^^
//│ ╟── • this reference:
//│ ║  l.529: 	def step (arr: Arrays['a]) f = f (stepImpl2 arr)
//│ ╙──       	                                  ^^^^^^^^^
//│     = [Function: step1]

// * Don't know why these don't work:
:e
def step arr f = f (stepImpl2_ty arr)
//│ 'a -> ((ArraysImpl['A, ('Rep, 'Rep,)] -> 'b) -> 'b
//│   where
//│     'a <: forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r)
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.581: 	def step arr f = f (stepImpl2_ty arr)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'Rep` leaks out of its scope
//│ ║  l.40: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.581: 	def step arr f = f (stepImpl2_ty arr)
//│ ╙──       	             ^^^^^^^^^^^^^^^^^^^^^^^^
//│     = [Function: step2]
:e
def step (arr: Arrays['a]) f = f (stepImpl2_ty arr)
//│ Arrays['a] -> ((ArraysImpl['A, ('Rep, 'Rep,)] | error) -> 'b) -> 'b
//│   where
//│     'Rep :> ??Rep
//│          <: ??Rep0
//│ where
//│   'Rep :> ??Rep
//│        <: ??Rep0
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in application
//│ ║  l.599: 	def step (arr: Arrays['a]) f = f (stepImpl2_ty arr)
//│ ║         	                                  ^^^^^^^^^^^^^^^^
//│ ╟── type variable `'Rep` leaks out of its scope
//│ ║  l.40: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.599: 	def step (arr: Arrays['a]) f = f (stepImpl2_ty arr)
//│ ║         	                                               ^^^
//│ ╟── • this reference:
//│ ║  l.599: 	def step (arr: Arrays['a]) f = f (stepImpl2_ty arr)
//│ ╙──       	                                  ^^^^^^^^^^^^
//│     = [Function: step3]


ssb = step (step base)
//│ ssb: Arrays['a]
//│    = [Function (anonymous)]

ssb (fun arr ->
    let r2 = arr.Update (arr.Init true) 1 false
    in (arr.Sub r2 0, arr.Sub r2 1)
  )
//│ res: (Bool, Bool,)
//│    = [ true, false ]



rec def mkMonoArray n =
  if n == 0 then base else step (mkMonoArray(n - 1))
//│ mkMonoArray: int -> Arrays['a]
//│            = [Function: mkMonoArray]

snb = mkMonoArray 5
//│ snb: Arrays['a]
//│    = [Function (anonymous)]

snb (fun arr -> arr.Init true)
//│ res: ??Rep | ??Rep0
//│    = [
//│        [ [ [Array], [Array] ], [ [Array], [Array] ] ],
//│        [ [ [Array], [Array] ], [ [Array], [Array] ] ]
//│      ]


// * From the paper:
// let mkPolyArray n = {∀α(∃ρ.∀β.sig(α,ρ,β))} (mkMonoArray n)





