:NoRecursiveTypes

// type bot = 0;;
type Bot = forall 'a. 'a
//│ Defined type alias Bot

// (* Rank 6 with intersection types, untypable in predicative System F,
//    typable in impredicative System F *)


// let imp (z : bot) =
//   (fun (x : ['a] ('a -> 'u) -> 'v) -> x x)
//   (fun (y : 'a -> bot) -> y z y);;
def imp (z: Bot) =
  (fun (x: forall 'a. ('a -> 'u) -> 'v) -> x x)
  (fun (y: 'a -> Bot) -> y z y)
def imp' z =
  (fun x -> x x)
  (fun y -> y z y)
//│ imp: Bot -> nothing
//│    = [Function: imp]
//│ imp': ('a -> 'a -> (forall 'b 'c. ('a -> 'b -> 'c & 'b) -> 'c) -> 'd & 'a) -> 'd
//│     = [Function: imp$]


// (* Quelques constantes. *)

// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let id = fun x -> x
// ;;
def id = fun x -> x
//│ id: 'a -> 'a
//│   = [Function: id]

// let delta = fun (x:sid) -> x x
// ;;
def delta = fun (x: Sid) -> x x
def delta' = fun x -> x x
//│ delta: Sid -> Sid
//│      = [Function: delta]
//│ delta': ('a -> 'b & 'a) -> 'b
//│       = [Function: delta$]

// delta id ;;
delta id
delta' id
//│ res: Sid
//│    = [Function: id]
//│ res: 'a -> 'a
//│    = [Function: id]

// let t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e)) ;;
def t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e))
//│ t: ('a -> 'a -> 'b) -> ('c -> 'a) -> ('d -> 'c) -> ('e -> 'd) -> 'e -> 'b
//│  = [Function: t]

// let t w z a b = (fun y -> (fun x -> w (x y) z) a) b ;;
def t w z a b = (fun y -> (fun x -> w (x y) z) a) b
//│ t: ('a -> 'b -> 'c) -> 'b -> ('d -> 'a) -> 'd -> 'c
//│  = [Function: t1]

// let t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x)) ;;
def t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x))
//│ t: 'a -> (('a | 'b) -> 'b) -> 'b
//│  = [Function: t2]

// (* Rank 1 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) ;;
// * Note that the `forall` is not distributed out because there's no enclosing polymorphic type here!
(fun x -> fun y -> x y) (fun y -> fun x -> x y)
//│ res: 'a -> (forall 'b. ('a -> 'b) -> 'b)
//│    = [Function (anonymous)]

// (* Rank 3 *)
// (fun x -> fun y -> x) delta ;;
(fun x -> fun y -> x) delta
(fun x -> fun y -> x) delta'
//│ res: anything -> Sid -> Sid
//│    = [Function (anonymous)]
//│ res: anything -> (forall 'a 'b. ('a -> 'b & 'a) -> 'b)
//│    = [Function (anonymous)]

// (* Rank 5 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) delta ;;
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta'
//│ res: ((Sid -> Sid) -> 'a) -> 'a
//│    = [Function (anonymous)]
//│ res: ((forall 'a 'b. ('a -> 'b & 'a) -> 'b) -> 'c) -> 'c
//│    = [Function (anonymous)]

// (* Rank 8 *)
// (fun (x:sid) -> x x x x x) id delta ;;
(fun (x: Sid) -> x x x x x) id delta
(fun x -> x x x x x) id delta'
//│ res: Sid -> Sid
//│    = [Function: delta]
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: delta$]

// (* Rank 2 *)
// type sk = ['a,'b] 'a -> 'b -> 'a;;
// (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v) ;;
type Sk = forall 'a 'b. 'a -> 'b -> 'a
(fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ Defined type alias Sk
//│ res: anything -> Sk
//│    = [Function (anonymous)]
//│ res: anything -> (forall 'a. 'a -> anything -> 'a)
//│    = [Function (anonymous)]

// (* Rank 3 *)
// (fun t -> fun k -> t k) (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v);;
(fun t -> fun k -> t k) (fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun t -> fun k -> t k) (fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ res: anything -> Sk
//│    = [Function (anonymous)]
//│ res: anything -> (forall 'a. 'a -> anything -> 'a)
//│    = [Function (anonymous)]


// let k = fun x y -> x
// let k' = fun x y -> y
// let app = fun f x -> f x
// let two = fun f x -> f (f x)
// let three = fun f x -> f (f (f x))
def k = fun x -> fun y -> x
def k2 = fun x -> fun y -> y
def app = fun f -> fun x -> f x
def two = fun f -> fun x -> f (f x)
def three = fun f -> fun x -> f (f (f x))
//│ k: 'a -> anything -> 'a
//│  = [Function: k]
//│ k2: anything -> 'a -> 'a
//│   = [Function: k2]
//│ app: ('a -> 'b) -> 'a -> 'b
//│    = [Function: app]
//│ two: ('a -> 'b & 'b -> 'c) -> 'a -> 'c
//│    = [Function: two]
//│ three: ('a -> 'b & 'b -> 'c & 'c -> 'd) -> 'a -> 'd
//│      = [Function: three]


// * Tony noticed this did not work before this commit generalizing the LHS of ascriptions...
:e // TODO this works when generalizing the LHS of ascriptions
(app id): Sid
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.150: 	(app id): Sid
//│ ║         	^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.29: 	type Sid = forall 'a. 'a -> 'a
//│ ║        	                      ^^
//│ ╟── back into type variable `'a`
//│ ║  l.29: 	type Sid = forall 'a. 'a -> 'a
//│ ║        	                            ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.133: 	def app = fun f -> fun x -> f x
//│ ╙──       	                            ^^^
//│ res: Sid
//│    = [Function (anonymous)]
// * this one works:
let t = app id in t: Sid
//│ res: Sid
//│    = [Function (anonymous)]


// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt


// (* Factorial of two and three *)
// (* Only ONE annotation ! *)
// let t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) two ;;

:e // * [FCP-LIM] TODO?
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ╔══[ERROR] Type error in application
//│ ║  l.183: 	def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.174: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                                   ^^
//│ ╟── back into type variable `'a`
//│ ║  l.174: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                             ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this applied expression:
//│ ║  l.183: 	def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ║         	                                                                                                                        ^
//│ ╟── • this applied expression:
//│ ║  l.183: 	def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ║         	                       ^
//│ ╟── • this function:
//│ ║  l.183: 	def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ║         	                                                                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.132: 	def k2 = fun x -> fun y -> y
//│ ║         	                           ^
//│ ╟── • this application:
//│ ║  l.183: 	def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ║         	                                                                                                                                                   ^^^^
//│ ╟── • this reference:
//│ ║  l.131: 	def k = fun x -> fun y -> x
//│ ║         	                          ^
//│ ╟── Note: constraint arises from application:
//│ ║  l.183: 	def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ╙──       	                                                                                                                                                                            ^^^^^^^^^^^^
//│ t: anything -> error
//│  = [Function: t3]

t id succ 0
//│ res: error
//│    = 2

:e
def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?c ?e ?d ?b. ?b -> ?c -> ?d) -> ?f` exceeded recursion depth limit (250)
//│ ║  l.223: 	def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ t2: (nothing -> anything) -> error
//│   = [Function: t21]

t2 id succ 0
//│ res: error
//│    = 2

// * Works with CT:
:ConstrainedTypes
def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ t2: 'a -> 'b -> ('c -> 'd
//│   where
//│     forall 'e 'f 'g. ('e -> 'f & 'f -> 'g) -> 'e -> 'g <: (forall 'h 'i 'o. 'h -> (('i -> (forall 'j 'k 'n 'l. 'j -> ('k -> 'l
//│       where
//│         'h <: (forall 'm. anything -> 'm -> 'm) -> 'j -> 'k -> 'n
//│         'j <: 'n -> 'l)) -> 'o) -> 'o
//│     where
//│       'h <: (forall 'm. anything -> 'm -> 'm) -> 'i)) -> (forall 'p. ((forall 'm. anything -> 'm -> 'm) -> (forall 'm. anything -> 'm -> 'm) -> 'p) -> 'p) -> (forall 'q. 'q -> anything -> 'q) -> 'r & 's -> 'c -> 'd
//│     forall 'z 'o1. ((forall 't. anything -> anything -> 't -> 't) -> (forall 'q. 'q -> anything -> 'q) -> (forall 'u 'v. ('u -> 'v) -> 'u -> 'v) -> (forall 'w 'c1 'd1 'x 'y. 'w -> ('x -> 'y
//│       where
//│         'z <: (forall 'h 'a1 'b1. 'h -> (('a1 -> (forall 'j 'k 'n 'l. 'j -> ('k -> 'l
//│           where
//│             'h <: (forall 'm. anything -> 'm -> 'm) -> 'j -> 'k -> 'n
//│             'j <: 'n -> 'l)) -> 'b1) -> 'b1
//│         where
//│           'h <: (forall 'm. anything -> 'm -> 'm) -> 'a1)) -> (forall 'p. ((forall 'm. anything -> 'm -> 'm) -> (forall 'm. anything -> 'm -> 'm) -> 'p) -> 'p) -> (forall 'q. 'q -> anything -> 'q) -> 'c1 & 'd1 -> 'x -> 'y
//│         forall 'i1 'n1. ((forall 'e1. anything -> anything -> 'e1 -> 'e1) -> (forall 'q. 'q -> anything -> 'q) -> (forall 'u 'v. ('u -> 'v) -> 'u -> 'v) -> (forall 'f1 'l1 'm1 'g1 'h1. 'f1 -> ('g1 -> 'h1
//│           where
//│             'i1 <: (forall 'h 'j1 'k1. 'h -> (('j1 -> (forall 'j 'k 'n 'l. 'j -> ('k -> 'l
//│               where
//│                 'h <: (forall 'm. anything -> 'm -> 'm) -> 'j -> 'k -> 'n
//│                 'j <: 'n -> 'l)) -> 'k1) -> 'k1
//│             where
//│               'h <: (forall 'm. anything -> 'm -> 'm) -> 'j1)) -> (forall 'p. ((forall 'm. anything -> 'm -> 'm) -> (forall 'm. anything -> 'm -> 'm) -> 'p) -> 'p) -> (forall 'q. 'q -> anything -> 'q) -> 'l1 & 'm1 -> 'g1 -> 'h1
//│             anything -> 'a <: 'l1 -> 'f1 -> 'm1)) -> 'n1 & 'i1) -> 'n1 <: 'c1 -> 'w -> 'd1)) -> 'o1 & 'z) -> 'o1 <: 'r -> 'b -> 's)
//│   = [Function: t22]
:NoConstrainedTypes

//:e // due to tapping
t2 id succ 0
//│ res: int
//│    = 2


// let t y = (fun h -> h (h (h (h (fun x -> y))))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) three

:e // * [FCP-LIM] TODO?
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ╔══[ERROR] Type error in application
//│ ║  l.275: 	def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.174: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                                   ^^
//│ ╟── back into type variable `'a`
//│ ║  l.174: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                             ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this applied expression:
//│ ║  l.275: 	def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ║         	                                                                                                                        ^
//│ ╟── • this applied expression:
//│ ║  l.275: 	def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ║         	                       ^
//│ ╟── • this function:
//│ ║  l.275: 	def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ║         	                                                                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.132: 	def k2 = fun x -> fun y -> y
//│ ║         	                           ^
//│ ╟── • this application:
//│ ║  l.275: 	def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ║         	                                                                                                                                                   ^^^^
//│ ╟── • this reference:
//│ ║  l.131: 	def k = fun x -> fun y -> x
//│ ║         	                          ^
//│ ╟── Note: constraint arises from application:
//│ ║  l.275: 	def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ╙──       	                                                                                                                                                                            ^^^^^^^^^^^^
//│ t: anything -> error
//│  = [Function: t4]
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.276: 	def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ t2: ('a -> ('b -> 'c & 'd & 'e & 'f)) -> (error | ('a & 'g) -> ((forall 'h. anything -> 'h -> 'h) -> ((forall 'i 'j 'k 'l 'n 'o. ((forall 'h. anything -> 'h -> 'h) -> ('i -> 'j -> 'k & 'l)) -> ('l -> (forall 'm. ('k -> 'm & 'i) -> 'j -> 'm) -> 'n) -> ('o -> 'o | 'n) | 'e) -> (forall 'p 'q 's 'r. ((forall 'h. anything -> 'h -> 'h) -> (forall 'h. anything -> 'h -> 'h) -> 'p & 'q & 'r) -> ('r -> 'r | 's | 'p) | 't | 'c | 'u
//│   where
//│     'q <: (forall 'v 'w. anything -> 'v -> ('w -> 'w | 'v) | 'x) -> (forall 'y. ('b -> 'y & 'e) -> ('b & 't) -> 'y) -> 's) -> 'b & 'x) & 'b & 't & 'z & 'a1) -> ('c | 'u))
//│ where
//│   'b :> forall 'p 'q 's 'b1 'c1. ((forall 'h. anything -> 'h -> 'h) -> (forall 'h. anything -> 'h -> 'h) -> 'p & 'q & 'b1) -> ('c1 -> ('b1 | 'c1) | 's | 'p | 'b1) | 'c | 'u
//│     where
//│       'q <: (forall 'v 'w. anything -> 'v -> ('w -> 'w | 'v) | 'x) -> (forall 'y. ('b -> 'y & 'e) -> ('b & 't) -> 'y) -> 's
//│      <: (forall 'h. anything -> 'h -> 'h) -> nothing -> nothing -> anything
//│   'c <: (forall 'h. anything -> 'h -> 'h) -> ((forall 'i 'j 'k 'l 'n 'o. ((forall 'h. anything -> 'h -> 'h) -> ('i -> 'j -> 'k & 'l)) -> ('l -> (forall 'm. ('k -> 'm & 'i) -> 'j -> 'm) -> 'n) -> ('o -> 'o | 'n) | 'e) -> (forall 'p 'q 's 'd1. ((forall 'h. anything -> 'h -> 'h) -> (forall 'h. anything -> 'h -> 'h) -> 'p & 'q & 'd1) -> ('d1 -> 'd1 | 's | 'p) | 't | 'c | 'u
//│     where
//│       'q <: (forall 'v 'w. anything -> 'v -> ('w -> 'w | 'v) | 'x) -> (forall 'y. ('b -> 'y & 'e) -> ('b & 't) -> 'y) -> 's) -> 'b & 'x & 'e1)
//│   'e1 <: (forall 'f1. anything -> anything -> 'f1 -> 'f1) -> (forall 'g1. 'g1 -> anything -> 'g1) -> (forall 'h1 'i1. ('h1 -> 'i1) -> 'h1 -> 'i1) -> ('a -> ('b & 't & 'z) -> 'c) -> 'g -> ((forall 'j1 'k1. ((forall 'h. anything -> 'h -> 'h) -> (forall 'h. anything -> 'h -> 'h) -> 'j1 & 'k1) -> (anything -> 'k1 | 'j1) | 'a1 | 'c | 'u) -> 'l1 & 'l1 -> ((forall 'h. anything -> 'h -> 'h) -> ((forall 'i 'j 'k 'l 'n 'o. ((forall 'h. anything -> 'h -> 'h) -> ('i -> 'j -> 'k & 'l)) -> ('l -> (forall 'm. ('k -> 'm & 'i) -> 'j -> 'm) -> 'n) -> ('o -> 'o | 'n) | 'e) -> (forall 'p 'q 's 'm1. ((forall 'h. anything -> 'h -> 'h) -> (forall 'h. anything -> 'h -> 'h) -> 'p & 'q & 'm1) -> ('m1 -> 'm1 | 's | 'p) | 't | 'c | 'u
//│     where
//│       'q <: (forall 'v 'w. anything -> 'v -> ('w -> 'w | 'v) | 'x) -> (forall 'y. ('b -> 'y & 'e) -> ('b & 't) -> 'y) -> 's) -> 'b & 'x) & 'u)) & (forall 'i 'j 'k 'l 'n. ((forall 'h. anything -> 'h -> 'h) -> ('i -> 'j -> 'k & 'l)) -> ('l -> (forall 'm. ('k -> 'm & 'i) -> 'j -> 'm) -> 'n) -> 'n) -> (forall 'p. ((forall 'h. anything -> 'h -> 'h) -> (forall 'h. anything -> 'h -> 'h) -> 'p) -> 'p) -> (forall 'g1. 'g1 -> anything -> 'g1) -> anything & 'd -> 'f
//│   'l1 :> forall 'q 's 'n1. 'q -> ('n1 -> 'n1 | 's) | 'c
//│     where
//│       'q <: (forall 'v 'w. anything -> 'v -> ('w -> 'w | 'v) | 'x) -> (forall 'y. ('b -> 'y & 'e) -> ('b & 't) -> 'y) -> 's
//│       <: (forall 'h. anything -> 'h -> 'h) -> (nothing -> nothing -> anything & 'e1) & 'b & 't & 'z
//│   'f <: (forall 'p 'q 's 'o1. ((forall 'h. anything -> 'h -> 'h) -> (forall 'h. anything -> 'h -> 'h) -> 'p & 'q & 'o1) -> ('o1 -> 'o1 | 's | 'p) | 'z | 'c | 'u
//│     where
//│       'q <: (forall 'v 'w. anything -> 'v -> ('w -> 'w | 'v) | 'x) -> (forall 'y. ('b -> 'y & 'e) -> ('b & 't) -> 'y) -> 's) -> 'c
//│ where
//│   'b :> forall 'p 'q 's 'b1 'c1. ((forall 'h. anything -> 'h -> 'h) -> (forall 'h. anything -> 'h -> 'h) -> 'p & 'q & 'b1) -> ('c1 -> ('b1 | 'c1) | 's | 'p | 'b1) | 'c | 'u
//│     where
//│       'q <: (forall 'v 'w. anything -> 'v -> ('w -> 'w | 'v) | 'x) -> (forall 'y. ('b -> 'y & 'e) -> ('b & 't) -> 'y) -> 's
//│      <: (forall 'h. anything -> 'h -> 'h) -> nothing -> nothing -> anything
//│   'c <: (forall 'h. anything -> 'h -> 'h) -> ((forall 'i 'j 'k 'l 'n 'o. ((forall 'h. anything -> 'h -> 'h) -> ('i -> 'j -> 'k & 'l)) -> ('l -> (forall 'm. ('k -> 'm & 'i) -> 'j -> 'm) -> 'n) -> ('o -> 'o | 'n) | 'e) -> (forall 'p 'q 's 'd1. ((forall 'h. anything -> 'h -> 'h) -> (forall 'h. anything -> 'h -> 'h) -> 'p & 'q & 'd1) -> ('d1 -> 'd1 | 's | 'p) | 't | 'c | 'u
//│     where
//│       'q <: (forall 'v 'w. anything -> 'v -> ('w -> 'w | 'v) | 'x) -> (forall 'y. ('b -> 'y & 'e) -> ('b & 't) -> 'y) -> 's) -> 'b & 'x & 'e1)
//│   'e1 <: (forall 'f1. anything -> anything -> 'f1 -> 'f1) -> (forall 'g1. 'g1 -> anything -> 'g1) -> (forall 'h1 'i1. ('h1 -> 'i1) -> 'h1 -> 'i1) -> ('a -> ('b & 't & 'z) -> 'c) -> 'g -> ((forall 'j1 'k1. ((forall 'h. anything -> 'h -> 'h) -> (forall 'h. anything -> 'h -> 'h) -> 'j1 & 'k1) -> (anything -> 'k1 | 'j1) | 'a1 | 'c | 'u) -> 'l1 & 'l1 -> ((forall 'h. anything -> 'h -> 'h) -> ((forall 'i 'j 'k 'l 'n 'o. ((forall 'h. anything -> 'h -> 'h) -> ('i -> 'j -> 'k & 'l)) -> ('l -> (forall 'm. ('k -> 'm & 'i) -> 'j -> 'm) -> 'n) -> ('o -> 'o | 'n) | 'e) -> (forall 'p 'q 's 'm1. ((forall 'h. anything -> 'h -> 'h) -> (forall 'h. anything -> 'h -> 'h) -> 'p & 'q & 'm1) -> ('m1 -> 'm1 | 's | 'p) | 't | 'c | 'u
//│     where
//│       'q <: (forall 'v 'w. anything -> 'v -> ('w -> 'w | 'v) | 'x) -> (forall 'y. ('b -> 'y & 'e) -> ('b & 't) -> 'y) -> 's) -> 'b & 'x) & 'u)) & (forall 'i 'j 'k 'l 'n. ((forall 'h. anything -> 'h -> 'h) -> ('i -> 'j -> 'k & 'l)) -> ('l -> (forall 'm. ('k -> 'm & 'i) -> 'j -> 'm) -> 'n) -> 'n) -> (forall 'p. ((forall 'h. anything -> 'h -> 'h) -> (forall 'h. anything -> 'h -> 'h) -> 'p) -> 'p) -> (forall 'g1. 'g1 -> anything -> 'g1) -> anything & 'd -> 'f
//│   'f <: (forall 'p 'q 's 'o1. ((forall 'h. anything -> 'h -> 'h) -> (forall 'h. anything -> 'h -> 'h) -> 'p & 'q & 'o1) -> ('o1 -> 'o1 | 's | 'p) | 'z | 'c | 'u
//│     where
//│       'q <: (forall 'v 'w. anything -> 'v -> ('w -> 'w | 'v) | 'x) -> (forall 'y. ('b -> 'y & 'e) -> ('b & 't) -> 'y) -> 's) -> 'c
//│   'l1 :> forall 'q 's 'n1. 'q -> ('n1 -> 'n1 | 's) | 'c
//│     where
//│       'q <: (forall 'v 'w. anything -> 'v -> ('w -> 'w | 'v) | 'x) -> (forall 'y. ('b -> 'y & 'e) -> ('b & 't) -> 'y) -> 's
//│       <: (forall 'h. anything -> 'h -> 'h) -> (nothing -> nothing -> anything & 'e1) & 'b & 't & 'z
//│   'q <: (forall 'v 'w. anything -> 'v -> ('w -> 'w | 'v) | 'x) -> (forall 'y. ('b -> 'y & 'e) -> ('b & 't) -> 'y) -> 's
//│   = [Function: t23]

// (* This comment is from the ORIGINAL PAGE: *)
// (* Factorial of three. Exposed bugs in old implementation. This one works correctly, but the generated files take up to 3.8GB, and it takes about 1 hour on a 2GHz PIII box to get the result. You can see the final judgement here. Yes, the result is the Church numeral for 6. *)

// (* We test that the result is 6: *)
// let succ n = n + 1 ;;
// t id succ 0 ;;

// :e // fails since the fix to spurious-TV-cycles // succeeds since the fix to the fix to spurious-TV-cycles...
t id succ 0
//│ res: error
//│    = 6

:e
t2 id succ 0
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.369: 	t2 id succ 0
//│ ║         	^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b. ?b -> ?a)` is not an instance of type `int`
//│ ║  l.131: 	def k = fun x -> fun y -> x
//│ ╙──       	        ^^^^^^^^^^^^^^^^^^^
//│ res: error
//│    = 6


// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z y) in x x;;
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z y in x x
//│ t: nothing -> nothing
//│  = [Function: t5]

// (* Plus petit. *)
// type tt = ['b = 0] ['c > ['a] ['d = ['t] 'a -> 't] ['e] 'd -> 'e] 'b -> 'c ;;
// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z) in x x;;
type Tt = forall 'b 'c. ('b & nothing) -> ('c | (forall 'a 'd 'e. ('d & (forall 't. 'a -> 't))) -> 'e)
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z in x x
//│ Defined type alias Tt
//│ t: nothing -> nothing
//│  = [Function: t6]


// (*
//     * Rank 3, untypable in System F?
//       (fun x -> z (x (fun f -> fun u -> f u)) (x (fun v -> fun g -> g v))) (fun y -> y y y)
// FIXME: z is free???

//     * Untypable at any rank
//       (fun x -> x x) (fun x -> x x)
// :e // TODO show failure without cycle check // works with quantif extrus
:re
:e // FIXME? refreshing-extr
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.405: 	(fun x -> x x) (fun x -> x x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

//     * Rank 3, untypable in F2 but F3
//       (fun f x -> f (f x)) (fun f x -> f (f x)) (fun v w -> v)
(fun f -> fun x -> f (f x)) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'a :> 'b
//│     'b :> anything -> anything -> 'a
//│    = [Function (anonymous)]

//     * Rank 4, alternate formulation, untypeable in F2, but F3
//       (fun two k -> two two k)(fun f x -> f (f x)) (fun v w -> v)
// :e // fails after new-refreshing-extrusion // Works since inconsistent constrained types...
(fun two -> fun k -> two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'a :> 'b
//│     'b :> anything -> anything -> 'a
//│    = [Function (anonymous)]

//     * Rank 5, causes huge blowup. Do not attempt to output skeletons !
//       (fun two k -> two two two k)(fun f -x -> f (f x)) (fun v w -> v)
// * Note: the only example in this file that requires `:GeneralizeCurriedFunctions`
// :e // due to not stashing...?
// :e // FIXedME? refreshing-extr // Works since inconsistent constrained types...
// :e
(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'a :> 'c
//│     'c :> anything -> 'a | 'b
//│     'b :> anything -> 'c
//│    = [Function (anonymous)]
// * Works with CT:
:ConstrainedTypes
(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     forall 'c 'l 'd. 'c -> 'd
//│       where
//│         forall 'e 'k 'f. 'e -> 'f
//│           where
//│             forall 'g 'j 'h. 'g -> 'h
//│               where
//│                 forall 'i. 'i -> anything -> 'i <: 'g -> 'j & 'j -> 'h <: 'e -> 'k & 'k -> 'f <: 'c -> 'l & 'l -> 'd <: 'a -> 'm & 'm -> 'b
//│    = [Function (anonymous)]
:NoConstrainedTypes



//  ?????
//     * Factorial of two, using the Y combinator
//       (fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))

// *)
// :e // works with quantif extrus
:e // FIXME? refreshing-extr
:re
(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.471: 	(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.471: 	(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


